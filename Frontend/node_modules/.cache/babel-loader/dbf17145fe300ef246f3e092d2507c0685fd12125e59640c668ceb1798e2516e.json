{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\TRINADH\\\\Downloads\\\\BITS Notes\\\\second sem\\\\Full stack\\\\School Vaccination Project\\\\Frontend\\\\src\\\\components\\\\routing\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport Spinner from \"../layout/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(null); // Add state to track login status\n\n  useEffect(() => {\n    const loginStatus = localStorage.getItem(\"isLoggedIn\");\n    setIsLoggedIn(loginStatus); // Update state based on localStorage\n  }, []);\n\n  // If the state hasn't been set yet, show a loading spinner\n  if (isLoggedIn === null) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this); // You can use your existing Spinner component or any loading state here\n  }\n\n  // If not logged in, redirect to login page\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If logged in, render the protected content\n  return children;\n};\n_s(PrivateRoute, \"UCIitKGgfMoQ24bMp4CTy4Yc+qY=\");\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useEffect","useState","Navigate","Spinner","jsxDEV","_jsxDEV","PrivateRoute","children","isLoggedIn","setIsLoggedIn","loginStatus","localStorage","getItem","fileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["C:/Users/TRINADH/Downloads/BITS Notes/second sem/Full stack/School Vaccination Project/Frontend/src/components/routing/PrivateRoute.js"],"sourcesContent":["\"use client\"\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport Spinner from \"../layout/Spinner\"\r\n\r\nconst PrivateRoute = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(null) // Add state to track login status\r\n\r\n  useEffect(() => {\r\n    const loginStatus = localStorage.getItem(\"isLoggedIn\")\r\n    setIsLoggedIn(loginStatus) // Update state based on localStorage\r\n  }, [])\r\n\r\n  // If the state hasn't been set yet, show a loading spinner\r\n  if (isLoggedIn === null) {\r\n    return <Spinner /> // You can use your existing Spinner component or any loading state here\r\n  }\r\n\r\n  // If not logged in, redirect to login page\r\n  if (!isLoggedIn) {\r\n    return <Navigate to=\"/login\" />\r\n  }\r\n\r\n  // If logged in, render the protected content\r\n  return children\r\n}\r\n\r\nexport default PrivateRoute\r\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;AAEZ,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,OAAO,MAAM,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAT,EAAA;EACrC,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,EAAC;;EAEnDD,SAAS,CAAC,MAAM;IACd,MAAMU,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACtDH,aAAa,CAACC,WAAW,CAAC,EAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIF,UAAU,KAAK,IAAI,EAAE;IACvB,oBAAOH,OAAA,CAACF,OAAO;MAAAU,QAAA,EAAAhB,YAAA;MAAAiB,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAAC;EACrB;;EAEA;EACA,IAAI,CAACP,UAAU,EAAE;IACf,oBAAOH,OAAA,CAACH,QAAQ;MAACc,EAAE,EAAC;IAAQ;MAAAH,QAAA,EAAAhB,YAAA;MAAAiB,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;;EAEA;EACA,OAAOR,QAAQ;AACjB,CAAC;AAAAT,EAAA,CApBKQ,YAAY;AAAAW,EAAA,GAAZX,YAAY;AAsBlB,eAAeA,YAAY;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}